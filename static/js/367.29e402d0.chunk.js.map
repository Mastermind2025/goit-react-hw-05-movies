{"version":3,"file":"static/js/367.29e402d0.chunk.js","mappings":"6PACA,EAAsB,oBAAtB,EAAiD,qBAAjD,EAA+E,uBAA/E,EAA6G,qBAA7G,EAAyI,qBAAzI,EAAyK,yBAAzK,EAA6M,yB,SCyD7M,EAhDe,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAaC,EAWnB,OATAC,EAAAA,EAAAA,YAAU,WACNH,GAAW,IACXI,EAAAA,EAAAA,IAAgBV,GAASW,MAAK,SAAAC,GAAI,OAAIR,EAAUQ,EAAKC,QAAnB,IAC7BC,OAAM,WACHC,EAAAA,OAAAA,QAAe,kCAClB,IACAC,SAAQ,kBAAMV,GAAW,EAAjB,GAChB,GAAE,CAACN,IAEAK,GACO,SAACY,EAAA,EAAD,KAKP,2BACuB,IAAlBd,EAAOe,SACJ,iBAAKC,UAAWC,EAAhB,WACI,cAAGD,UAAWC,EAAd,qFACA,gBACIC,IAAKd,EAAYe,IAAI,aAAaH,UAAWC,QAGzD,eAAID,UAAWC,EAAf,SACgB,OAAXjB,GACGA,EAAOoB,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,WAC/B,OACI,gBAAaR,UAAWC,EAAxB,WACI,eAAGD,UAAWC,EAAd,qBAAmCI,MACnC,cAAGL,UAAWC,EAAd,SAAyBO,EAAWC,MAAM,EAAG,OAC7C,cAAGT,UAAWC,EAAd,SAAyBK,MAHpBC,EAMhB,QAOpB,C","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesList/Review/Review.module.css?bc37","components/MoviesList/Review/Review.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"Review_box__jdqJ6\",\"item\":\"Review_item__aqDQn\",\"author\":\"Review_author__oGSOn\",\"data\":\"Review_data__Dxy11\",\"text\":\"Review_text__TQwBX\",\"boxError\":\"Review_boxError__xzRL4\",\"imgError\":\"Review_imgError__-eQ+p\"};","import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { getMovieReviews } from \"service/movies.service\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport Spinner from \"components/Spinner/Spinner\";\nimport image from '../../../images/review-1.png';\nimport css from './Review.module.css';\n\n\nconst Review = () => {\n    const { movieId } = useParams();\n    const [review, setReview] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const defaultImg = image;\n\n    useEffect(() => {\n        setLoading(true);\n        getMovieReviews(movieId).then(data => setReview(data.results))\n            .catch(() => {\n                Notify.failure(' This movie has not any review ');\n            })\n            .finally(() => setLoading(false));\n    }, [movieId]);\n\n    if (loading) {\n        return <Spinner/>\n    };\n\n   \n    return (\n        <div>\n            {review.length === 0 &&\n                <div className={css.boxError}>\n                    <p className={css.text}>We did not find any reviews, but you can be the first if you leave one</p>\n                    <img\n                        src={defaultImg} alt=\"no reviews\" className={css.imgError} />\n                </div>\n            }\n            <ul className={css.box}>\n                {review !== null &&\n                    review.map(({ author, content, id, created_at }) => {\n                        return (\n                            <li key={id} className={css.item}>\n                                <p className={css.author}>Author: {author}</p>\n                                <p className={css.data}>{created_at.slice(0, 10)}</p>\n                                <p className={css.text}>{content}</p>\n                            </li>\n                        )\n                    })\n                }    \n            </ul>\n        </div>\n\n    )\n\n}\n\nexport default Review;"],"names":["movieId","useParams","useState","review","setReview","loading","setLoading","defaultImg","image","useEffect","getMovieReviews","then","data","results","catch","Notify","finally","Spinner","length","className","css","src","alt","map","author","content","id","created_at","slice"],"sourceRoot":""}