{"version":3,"file":"static/js/858.143deb4f.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/NotFound/NotFound.module.css?3aa0","components/NotFound/NotFound.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesList/MovieCard/MovieCard.module.css?d776","components/MoviesList/MovieCard/MovieCard.jsx","webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"NotFound_box__DiuDZ\",\"img\":\"NotFound_img__IethY\",\"text\":\"NotFound_text__OfBlj\"};","import image from '../../images/i-dont-know-compilation-dont-know.gif';\nimport css from './NotFound.module.css';\n\nconst NotFound = () => {\n    return(\n        <div className={css.box}>\n            <img src={image} alt=\"not found\" className={css.img} />\n            <p className={css.text}>:( We coudnot find any movie</p>\n        </div>\n    )\n}\n\nexport default NotFound;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MovieCard_title__8xDfF\",\"text\":\"MovieCard_text__c1FFk\",\"list\":\"MovieCard_list__u6Dob\",\"link\":\"MovieCard_link__YNH-s\",\"infoTitle\":\"MovieCard_infoTitle__orpNv\",\"infoText\":\"MovieCard_infoText__6w8GP\"};","import css from './MovieCard.module.css';\nimport PropTypes from 'prop-types';\n\nconst MovieCard = ({\n    original_title,\n    title,\n    overview,\n    vote_average,\n    genresOfMovie,\n    imdb_id,\n    homepage,\n    release }) => {\n    \n    return (\n        <div>\n            <p className={css.title}>{title} ({release})</p>\n            {title !== original_title && (\n                <p>\n                    <span className={css.title}>{original_title}</span>\n                    <span className={css.text}>(original title)</span>\n                </p>\n            )}\n                        \n            <ul className={css.list}>\n                <li>{imdb_id !== null && (<a href={`https://www.imdb.com/title/${imdb_id}`} className={css.link}>IMDB</a>)}</li>\n                <li>{homepage !== null && (<a href={homepage} className={css.link}>HomePage</a>)}</li>\n            </ul>\n            <p className={css.infoTitle}>User Score: {vote_average}</p>\n            <p className={css.infoTitle}>Overview</p>\n            <p className={css.infoText}>{overview}</p>\n            <p className={css.infoTitle}>Genres</p>\n            <p className={css.infoText}>{genresOfMovie.join(\", \")}</p>\n            \n        </div>\n    )\n}\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n    original_title: PropTypes.string, \n    title: PropTypes.string.isRequired,\n    overview: PropTypes.string,\n    vote_average: PropTypes.number,\n    genresOfMovie: PropTypes.array,\n    imdb_id: PropTypes.string,\n    homepage: PropTypes.string,\n    release: PropTypes.string,\n}","// extracted by mini-css-extract-plugin\nexport default {\"back\":\"MovieDetails_back__Jj+0O\",\"box\":\"MovieDetails_box__0AyGO\",\"posterBox\":\"MovieDetails_posterBox__llnT8\",\"poster\":\"MovieDetails_poster__yO7gD\",\"footer\":\"MovieDetails_footer__JuYtY\",\"infoTitle\":\"MovieDetails_infoTitle__tMHlw\",\"btnInfoList\":\"MovieDetails_btnInfoList__ccLv3\",\"btnInfo\":\"MovieDetails_btnInfo__wH9rf\"};","import { Suspense, useEffect, useState } from \"react\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useParams, useLocation, NavLink, Outlet, useNavigate } from \"react-router-dom\";\nimport { getMovieDetails } from \"service/movies.service\";\nimport { BsChevronDoubleLeft } from 'react-icons/bs';\n\nimport Spinner from \"components/Spinner/Spinner\";\nimport NotFound from \"components/NotFound/NotFound\";\nimport MovieCard from \"components/MoviesList/MovieCard/MovieCard\";\n\nimport image from '../../images/no.jpg';\nimport css from './MovieDetails.module.css';\n\n\nconst items = [\n    { name: 'Cast', link: 'cast' },\n    { name: 'Reviews', link: 'reviews' },\n];\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const [details, setDetails] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const location = useLocation();\n    const navigate = useNavigate();\n\n\n    useEffect(() => {\n        setLoading(true);\n        getMovieDetails(movieId).then(setDetails)\n            .catch(() => {\n                Notify.failure(':( Oops ');\n            })\n            .finally(() => setLoading(false));\n    }, [movieId]);\n\n    if (loading) {\n        return <Spinner/>\n    }\n    \n    if (!details) {\n        return <NotFound/>\n    }\n\n    const { release_date,\n            original_title,\n            title,\n            overview,\n            vote_average,\n            genres,\n            backdrop_path,\n            imdb_id,\n            homepage } = details;\n    \n    const release = release_date.slice(0, 4);\n    const genresOfMovie = genres.map(genre => genre.name);\n    const defaultImg = image;\n       \n    const activeStyle = {\n        backgroundColor: 'var(--color-bg-accent)',\n        color: 'var(--color-accent-lite)',\n    }\n    return (\n        <div>\n            <button \n                type=\"button\"\n                className={css.back}\n                onClick={() => navigate(location.state?.from ?? '/')}\n            >\n                <BsChevronDoubleLeft/> Back <BsChevronDoubleLeft/>\n            </button>\n            <section className={css.box}>\n                <div className={css.posterBox}>\n                    <img\n                        src={backdrop_path === null ? defaultImg : `https://image.tmdb.org/t/p/w500${backdrop_path}`}\n                        alt={title}\n                        className={css.poster}\n                    />\n                </div>\n                <MovieCard original_title={original_title} title={title} overview={overview} vote_average={vote_average} genresOfMovie={genresOfMovie} imdb_id={imdb_id} homepage={homepage} release={release} />\n                \n            </section>\n            <section className={css.footer}>\n                <p className={css.infoTitle}>Additional Informational</p>\n                <ul className={css.btnInfoList}>\n                    {items.map(({ name, link }) => (\n                        <li key={link}>\n                            <NavLink\n                                to={link}\n                                state={location.state}\n                                className={css.btnInfo}\n                                style={({ isActive }) =>\n                                    isActive ? activeStyle : undefined}\n                            >\n                               {name}\n                            </NavLink>\n                        </li>\n                    ))}\n\n                </ul>\n            </section>\n            <Suspense fallback={<Spinner/>}>\n                <Outlet/>\n            </Suspense>\n        </div>\n    )\n\n}\n\nexport default MovieDetails;"],"names":["className","css","src","image","alt","original_title","title","overview","vote_average","genresOfMovie","imdb_id","homepage","release","href","join","items","name","link","movieId","useParams","useState","details","setDetails","loading","setLoading","location","useLocation","navigate","useNavigate","useEffect","getMovieDetails","then","catch","Notify","finally","Spinner","NotFound","release_date","genres","backdrop_path","slice","map","genre","defaultImg","activeStyle","backgroundColor","color","type","onClick","state","from","to","style","isActive","undefined","Suspense","fallback"],"sourceRoot":""}